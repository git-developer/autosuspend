#!/bin/bash

#
# Helper functions to check kodi status
#
# Should be sourced from /usr/local/sbin/autosuspend.sh
#


#
# add logit function if not sourced from the original autosuspend.sh script
# (e.g. for debugging purposes)

if [ -z "$(type -t logit)" ] ; then
    logit() {
      echo AutoSuspend: $* >&2
      return 0
    }
fi

if [ "${KODI_ENABLED:-no}" == 'yes' ] ; then

    #
    # Check credentials and apply default values
    #
    KODI_IP=$(echo ${KODI_IP:-$(hostname -I)} | tr -d [:space:])
    KODI_HTTP_PORT=${KODI_HTTP_PORT:-80}
    if [ -z "$KODI_USER" ] || [ -z "$KODI_PASSWORD" ] ; then
        logit "No kodi credentials given (user and/or password)!"
        KODI_WEBPATH="http://$KODI_IP:$KODI_HTTP_PORT/jsonrpc"
    else
        logit "Kodi credentials given (user and password) but not yet supported!"
        KODI_WEBPATH="http://$KODI_IP:$KODI_HTTP_PORT/jsonrpc"
    fi
else
    logit "Kodi support is disabled by configuration"
fi

IsKodiBusy()
{
    if [ "${KODI_ENABLED:-no}" = 'yes' ] ; then

        kodi_player_status=$(curl -s -H 'Content-Type: application/json' -d '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id": 1}' $KODI_WEBPATH)
        if [[ $kodi_player_status = *"playerid"* ]]; then
            logit "Kodi is actively playing, auto suspend terminated"
            return 1
        fi
        kodi_library_update_status=$(curl -H "Content-Type: application/json" -X POST -d '{"jsonrpc":"2.0","method":"XBMC.GetInfoBooleans","params": { "booleans": ["library.isscanning"]} ,"id":1}' $KODI_WEBPATH)
        if [[ $kodi_library_update_status = *"true"* ]]; then
            logit "Kodi library is updating, auto suspend terminated"
            return 1
        fi

    fi
}

KodiScreenMessage()
{
    TITLE=$1
    BODY=$2
    # send message
    curl -s -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"GUI.ShowNotification","params":{"title":"'"$TITLE"'","message":"'"$BODY"'"},"id":1}' $KODI_WEBPATH >/dev/null

}

IsStreamActive()
{
    if [ "${STREAM_ENABLED:-no}" = 'yes' ] ; then

        LANG=C
        IFS=$'\n' active_stream=$(netstat -n| grep -oP "[0-9.]{7,15}:${STREAM_PORT:-8000}\s+\K([^\s]+)(?=:\d+\s+ESTABLISHED)")
        unset IFS
        if [ -n $active_stream ]; then
          logit "Server has an active streaming client: $active_stream"
          return 1
        fi

    fi
}
