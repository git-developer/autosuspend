#!/bin/bash

#
# Helper functions to shutdown and wakeup the server using Tvheadend
#
# Should be sourced from /usr/local/sbin/autosuspend.sh
#

# list of functions within this script file to check machine activity
# prevent autosuspend on return 1
# no objections if no return value is given
list_of_functions="IsTvheadendBusy"

#
# add logit function if not sourced from the original autosuspend.sh script
# (e.g. for debugging purposes)
#
if [ -z "$(type -t logit)" ] ; then
    logit() {
      echo AutoSuspend: $* >&2
      return 0
    }
fi

IsTvheadendBusy()
{
    if [ "${TVHEADEND_ENABLED:-yes}" == 'yes' ] ; then

        tvheadend_status=$(curl --max-time 15 -s --user $TVHEADEND_USER:$TVHEADEND_PASSWORD $TVHEADEND_WEBPATH/status.xml)
        [ "$?" = 28 ] && logit "curl: (28) Operation timed out after 15000 milliseconds to tvheadend at $TVHEADEND_WEBPATH/status.xml"

        # Does also work for more than 1 'recording' element
        recording_status=$(echo $tvheadend_status | xmlstarlet sel -t -v "currentload/recordings/recording/status='Recording'")
        if [ "$recording_status" = "true" ] ; then
            logit "Tvheadend is recording, auto suspend terminated"
            return 1
        fi

        subscription_count=$(echo $tvheadend_status | xmlstarlet sel -t -v "currentload/subscriptions")
        if [ "$subscription_count" -gt 0 ] ; then
            if [ "${TVHEADEND_CONSIDER_EPGGRABBING:-yes}" = 'yes' ] ; then
                logit "Tvheadend has $subscription_count subscriptions, auto suspend terminated"
                return 1
            else
                subscriptions=$(curl --max-time 15 -s --user $TVHEADEND_USER:$TVHEADEND_PASSWORD $TVHEADEND_WEBPATH/api/status/subscriptions)
                IFS=$'\n' subscription_titles+=($(echo $subscriptions | jq -r ".entries[] | .title" ))
                for subscription_title in "${subscription_titles[@]}"; do
                    if [ "$subscription_title" != "epggrab" ] ; then
                        logit "Tvheadend has subscription '$subscription_title', auto suspend terminated"
                        return 1
                    fi
                done
                unset IFS
            fi
        fi

        minutes=$(echo $tvheadend_status | xmlstarlet sel -t -v "currentload/recordings/recording/next")
        if [ -n "$minutes" ] && [ "$minutes" -le "${TVHEADEND_IDLE_MINUTES_BEFORE_RECORDING:-15}" ] ; then
            logit "Next Tvheadend recording starts in $minutes minutes, auto suspend terminated"
            return 1
        fi

        TVHEADEND_PORTS="$TVHEADEND_HTTP_PORT $TVHEADEND_HTSP_PORT"
        LANG=C
        active_clients=()
        for port in $TVHEADEND_PORTS; do
            IFS=$'\n' active_clients+=($(netstat -n | grep -oP "$TVHEADEND_IP:$port\s+\K([^\s]+)(?=:\d+\s+ESTABLISHED)"))
            unset IFS
        done
        if [ "$active_clients" ]; then
          logit "Tvheadend has active remote clients: ${active_clients[@]}"
          return 1
        fi
    fi

    next_activity=$(FindNextActivity)
    if [ -n "$next_activity" ] ; then
        now=$(date +%s)
        let delta=(next_activity - now)/60
        if [ "$delta" -le "${TVHEADEND_IDLE_MINUTES_BEFORE_RECORDING:-15}" ] ; then
            logit "Next activity starts in $delta minutes, auto suspend terminated"
            return 1
        fi
    fi

    return 0
}

FindNextActivity() {
    # syntax for elements in 'activities': '<source>:<timestamp>:<comment>'
    # comment is optional
    # example: '/etc/autosuspend.d/activities/twice-a-week.sh:1451602800:Boot for EPG'
    activities=()

    if [ "${TVHEADEND_ENABLED:-yes}" == 'yes' ] ; then
        # collect Tvheadend schedules
        tvheadend_dvr_upcoming=$(curl --max-time 15 -s --user "$TVHEADEND_USER:$TVHEADEND_PASSWORD" "$TVHEADEND_WEBPATH/api/dvr/entry/grid_upcoming?sort=start_real&dir=ASC&limit=5")
        IFS=$'\n' activities+=($(echo $tvheadend_dvr_upcoming | jq -r ".entries[] | \"Tvheadend schedule:\" + (.start_real | tostring) + \":\" + .channelname + \" - \" + .disp_title + if (.disp_subtitle | length > 0) then \" (\" + .disp_subtitle + \")\" else \"\" end"))
        unset IFS
        logit "Fetched next ${#activities[@]} upcoming recordings from Tvheadend"
    fi

    # loop over scripts in '$TVHEADEND_ACTIVITIES_PATH' and add user activities
    for script in "$TVHEADEND_ACTIVITIES_PATH"/*
    do
        if [ -f "$script" ] && [ -x "$script" ]
        then
            IFS=$'\n'
            for line in $("$script")
            do
                activities+=("$script:$line")
            done
            unset IFS
        fi
    done

    # return the earliest future timestamp
    if [ "${#activities[@]}" -gt 0 ]; then
        IFS=$'\n' activities=($(sort -t: -k2 <<<"${activities[*]}"))
        unset IFS

        # call hooks
        if [ "$1" = "--call-pre-suspend-hooks" ]; then
            CallPreSuspendHooks "activities" "${activities[@]}"
        fi

        now=$(date +%s)
        for timestamp_def in "${activities[@]}"
        do
            IFS=':' read -r source timestamp comment <<< "$timestamp_def"
            unset IFS
            message=""
            if [ -n "$comment" ]
            then
                message=": $comment"
            fi
            message="$(date --date @$timestamp)$message from $source"

            if [ "$timestamp" -gt "$now" ]
            then
                logit "Next activity at $message"
                echo "$timestamp"
                return
            else
                logit "Ignoring past activity at $message"
            fi
        done
    fi
}

# TODO: Could this things go to the main script file?
SetWakeupTime() {
    next=$(FindNextActivity '--call-pre-suspend-hooks')
    if [ -n "$next" ]; then
        wake_date=$(($next - ${TVHEADEND_BOOT_DELAY_SECONDS:-180}))
        # use wittyPi boot capabilities if available
        if [ ${WITTYPI_ENABLED:-no} = 'yes' -a -r "$WITTYPI_BASEDIR/utilities.sh" ] ; then
            . $WITTYPI_BASEDIR/utilities.sh
            wittyPi_dhms=`date -d "@$wake_date" "+%d %H %M %S"`
            # use wittyPi to set startup time
            set_startup_time $wittyPi_dhms
            logit "Used wittyPi to schedule next reboot on "`date -d "@$wake_date"`
        else
            echo 0 > /sys/class/rtc/rtc0/wakealarm
            logit $(/usr/sbin/rtcwake -m no -t $wake_date)
        fi
        CallPreSuspendHooks "wakeup_time" "$wake_date"
    else
        logit "No wake up time scheduled. Activity scripts may be added to '$TVHEADEND_ACTIVITIES_PATH'"
    fi
}

CallPreSuspendHooks() {
    for script in "$TVHEADEND_PRE_SUSPEND_HOOKS_PATH"/*
    do
        if [ -f "$script" ] && [ -x "$script" ]
        then
            IFS=$'\n'
            for line in $("$script" "$@")
            do
                logit "$script: $line"
            done
        fi
    done
}


# TODO: do we need these if Tvheadend is disabled?
TVHEADEND_ACTIVITIES_PATH=/etc/autosuspend.d/activities
TVHEADEND_PRE_SUSPEND_HOOKS_PATH=/etc/autosuspend.d/pre-suspend-hooks

if [ "${TVHEADEND_ENABLED:-yes}" == 'yes' ] ; then

    #
    # Check credentials and apply default values
    #
    if [ -z "$TVHEADEND_USER" ] || [ -z "$TVHEADEND_PASSWORD" ] ; then
        logit "Missing Tvheadend credentials (user and/or password)"
        return 1
    fi
    TVHEADEND_IP=${TVHEADEND_IP:-$(hostname)}
    TVHEADEND_HTTP_PORT=${TVHEADEND_HTTP_PORT:-9981}
    TVHEADEND_HTSP_PORT=${TVHEADEND_HTSP_PORT:-9982}
    TVHEADEND_WEBPATH="http://$TVHEADEND_IP:$TVHEADEND_HTTP_PORT/${TVHEADEND_WEBROOT}"

    # Tvheadend activity
    # $list_of_functions defined above
    for function in $list_of_functions; do
        $function
        if [ "$?" = "1" ]; then return 1; fi
    done
else
    logit "Tvheadend support is disabled by configuration"
fi
